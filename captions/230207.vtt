WEBVTT

1
00:00:03.180 --> 00:00:09.700
David Schaich (he): Okay, you may well have already gotten underway, while I was getting everything set up and logging in all three times

2
00:00:09.810 --> 00:00:12.180
David Schaich (he): to get to the Canvas site. But

3
00:00:12.730 --> 00:00:20.210
David Schaich (he): today these computer labs are something new for this year, largely to give you an opportunity to work on that computer project

4
00:00:20.250 --> 00:00:22.790
David Schaich (he): with me close to hand to

5
00:00:23.000 --> 00:00:26.740
David Schaich (he): answer any questions or any difficulties that you come up with.

6
00:00:26.790 --> 00:00:31.730
David Schaich (he): So I won't be saying too much, and won't need the doc-cam which this room doesn't have.

7
00:00:32.009 --> 00:00:33.100
David Schaich (he): What

8
00:00:33.540 --> 00:00:39.890
David Schaich (he): we'll be going through, just for a few minutes, is looking at that computer project assignment

9
00:00:40.100 --> 00:00:44.870
David Schaich (he): and talking through some of the specifically python

10
00:00:44.970 --> 00:00:46.920
David Schaich (he): pieces of it that

11
00:00:47.230 --> 00:00:58.360
David Schaich (he): we can look at through this demo. my python notebook. where I should now be able to log in

12
00:01:03.110 --> 00:01:08.790
David Schaich (he): Google collaboratory with just one more 2 factor

13
00:01:11.100 --> 00:01:12.590
David Schaich (he): education check.

14
00:01:25.920 --> 00:01:28.650
David Schaich (he): S0 0nce I'm in here i'll hop over to

15
00:01:29.970 --> 00:01:33.700
David Schaich (he): and computer projects, and I can say just off the top of my head

16
00:01:37.190 --> 00:01:48.460
David Schaich (he): before we are getting there, that there are 5 exercises in that assignment which is due in 2 weeks. So if you can get through the first 3 0f those.

17
00:01:48.490 --> 00:01:51.000
David Schaich (he): either today or at home

18
00:01:51.020 --> 00:01:55.160
David Schaich (he): on your own over the coming week. You'll be in good shape to wrap everything up

19
00:01:55.980 --> 00:01:58.100
David Schaich (he): on that time scale.

20
00:01:58.720 --> 00:02:02.010
David Schaich (he): and it is a fairly long

21
00:02:02.400 --> 00:02:08.150
David Schaich (he): Pdf file the computer project assignments, and hopefully that Isn't too, intimidating. Given that

22
00:02:08.220 --> 00:02:10.160
David Schaich (he): most of the exercises

23
00:02:11.020 --> 00:02:14.550
David Schaich (he): have a bit of relevant background information

24
00:02:15.180 --> 00:02:16.660
accompanying them.

25
00:02:16.730 --> 00:02:20.070
David Schaich (he): You give you well everything that you need is to

26
00:02:20.300 --> 00:02:25.400
David Schaich (he): complete the actual tasks. So the first bit of background, what we're going to be looking at

27
00:02:25.650 --> 00:02:31.790
David Schaich (he): is nicely continuing yesterday's lecture on the discussion of random walks.

28
00:02:31.960 --> 00:02:40.010
David Schaich (he): We will be looking at more interesting random walks where the step size taken at each tick of the clock in the walk

29
00:02:40.300 --> 00:02:41.820
David Schaich (he): is no longer just

30
00:02:41.870 --> 00:02:45.320
a fixed length, plus or minus one to the right or to the left.

31
00:02:45.590 --> 00:02:50.030
David Schaich (he): but it's is drawn from some non-trivial probability distribution.

32
00:02:51.160 --> 00:02:54.550
David Schaich (he): and we will do that drawing host

33
00:02:54.780 --> 00:02:57.130
David Schaich (he): step lengths from

34
00:02:58.540 --> 00:03:04.990
David Schaich (he): what are called pseudo-random number generators so using computer programming to generate

35
00:03:05.030 --> 00:03:09.120
David Schaich (he): random step lengths according to some given distribution.

36
00:03:09.440 --> 00:03:15.110
David Schaich (he): And we will look at 2 different distributions that have 2 different types of behavior.

37
00:03:15.200 --> 00:03:16.480
David Schaich (he): One of them the

38
00:03:16.650 --> 00:03:19.590
David Schaich (he): ordinary evolution that we went through yesterday.

39
00:03:19.610 --> 00:03:22.480
David Schaich (he): and the other so-called anomalous diffusion that I

40
00:03:22.640 --> 00:03:25.960
David Schaich (he): we'll say more about next week, just to split up the talking

41
00:03:26.040 --> 00:03:28.290
David Schaich (he): and not have it all today.

42
00:03:29.650 --> 00:03:38.700
David Schaich (he): But maybe the first thing to comment on is the pseudo in these pseudo-random numbers which arises from the fact that

43
00:03:38.870 --> 00:03:42.700
David Schaich (he): all the computer programs that we work with and you will be writing are

44
00:03:42.820 --> 00:03:53.500
David Schaich (he): deterministic. If you give them a fixed set of inputs, ask them to run. They will always give the same outputs, even if we want to incorporate some elements of randomness

45
00:03:53.790 --> 00:03:58.230
David Schaich (he): into the task that the computer is doing for us.

46
00:03:58.450 --> 00:04:01.210
David Schaich (he): So what computers provide are

47
00:04:01.450 --> 00:04:10.970
David Schaich (he): imitations of truly random numbers, that at least for our purposes, are more than random enough for things like encryption and cryptography.

48
00:04:11.000 --> 00:04:12.100
The

49
00:04:12.590 --> 00:04:16.279
David Schaich (he): pseudo-random numbers that we'll be using are insufficient.

50
00:04:16.350 --> 00:04:17.899
David Schaich (he): The idea is that

51
00:04:18.089 --> 00:04:21.250
David Schaich (he): the computer is giving us some sequence of numbers

52
00:04:21.350 --> 00:04:23.890
David Schaich (he): that appear random in the sense that

53
00:04:24.010 --> 00:04:34.540
David Schaich (he): if we have some large number of elements in the sequence, we will not be able to predict the next element that the computer gives us, with very high probability of success.

54
00:04:36.690 --> 00:04:37.600
David Schaich (he): And

55
00:04:38.910 --> 00:04:41.170
David Schaich (he): this is maybe the good point to

56
00:04:41.360 --> 00:04:45.260
David Schaich (he): hop over to that programming demo. And look at how this sort of thing

57
00:04:45.620 --> 00:04:50.940
David Schaich (he): it's done in Python, and as one final introductory. No. Here

58
00:04:51.010 --> 00:04:55.810
David Schaich (he): I will say that Python is

59
00:04:58.050 --> 00:05:02.220
David Schaich (he): a programming language that i'm recommending just for

60
00:05:02.410 --> 00:05:05.650
David Schaich (he): those of you who are getting started with programming.

61
00:05:05.920 --> 00:05:10.910
David Schaich (he): If you are already familiar with some other programming language like Fortran

62
00:05:11.300 --> 00:05:13.020
David Schaich (he): Matlab. See

63
00:05:13.740 --> 00:05:20.160
David Schaich (he): Rust, there are many options You're free to use whatever you want. Just submit the corresponding code

64
00:05:20.220 --> 00:05:21.690
David Schaich (he): along with the

65
00:05:21.910 --> 00:05:26.440
David Schaich (he): answers to the exercises or the tasks in the project.

66
00:05:26.680 --> 00:05:29.930
David Schaich (he): Python is nice because it is free.

67
00:05:30.100 --> 00:05:37.700
David Schaich (he): It is very widely used. and it is very user friendly compared to some things like Fortran or C.

68
00:05:39.090 --> 00:05:47.310
David Schaich (he): So this demo should have all the information that you need, even if you've never seen any sort of programming before for this project.

69
00:05:48.510 --> 00:05:49.840
David Schaich (he): Starting off with

70
00:05:50.070 --> 00:05:51.980
David Schaich (he): some of the setup for

71
00:05:52.570 --> 00:06:01.950
David Schaich (he): getting started with a python program where some of Pythons flexibility and usefulness comes from the existence of a large number of

72
00:06:01.990 --> 00:06:06.860
David Schaich (he): libraries or packages that can be imported into any given application.

73
00:06:06.950 --> 00:06:13.160
David Schaich (he): This will and imports keyword at the start. and in particular we will need

74
00:06:13.330 --> 00:06:16.850
David Schaich (he): It's pseudo-random number package called random.

75
00:06:17.030 --> 00:06:24.270
David Schaich (he): along with a few others like numerical python. it has useful numerical

76
00:06:26.310 --> 00:06:30.940
David Schaich (he): utilities and map Plot Lab makes it easy for

77
00:06:31.320 --> 00:06:33.940
David Schaich (he): things to be plotted through python.

78
00:06:35.040 --> 00:06:36.500
David Schaich (he): There's also a

79
00:06:37.190 --> 00:06:41.120
David Schaich (he): way to use this import statement to set up

80
00:06:41.190 --> 00:06:54.320
David Schaich (he): short nicknames for these packages that are being imported so numerical. Python we can call Np. And the map plot lib plotting package we can call.

81
00:06:55.700 --> 00:06:58.190
and the patch mark in Python

82
00:06:58.750 --> 00:07:00.410
David Schaich (he): declare that everything

83
00:07:00.470 --> 00:07:11.660
David Schaich (he): on the end of that line from here to the end of the line of code. It's just a comment that makes things easier for humans to read, and the computer itself is going to ignore that entirely.

84
00:07:15.030 --> 00:07:20.480
David Schaich (he): So I won't. Go through every detail of this demo, and please feel free to ask questions. Go ahead.

85
00:07:28.290 --> 00:07:29.060
Nice.

86
00:07:32.960 --> 00:07:33.670
David Schaich (he): Okay.

87
00:07:38.180 --> 00:07:40.060
David Schaich (he): This is on

88
00:07:40.480 --> 00:07:41.100
choice.

89
00:07:44.250 --> 00:07:45.060
David Schaich (he): Yes.

90
00:07:54.130 --> 00:07:55.930
David Schaich (he): and yeah, that

91
00:08:03.080 --> 00:08:04.730
David Schaich (he): chances are

92
00:08:05.410 --> 00:08:06.030
Yes.

93
00:08:06.450 --> 00:08:07.410
David Schaich (he): So

94
00:08:09.620 --> 00:08:11.110
they roll their needs for you.

95
00:08:11.130 --> 00:08:14.370
David Schaich (he): So on the local issue

96
00:08:21.820 --> 00:08:26.230
David Schaich (he): window. Come on. And I

97
00:08:28.140 --> 00:08:28.810
Yeah.

98
00:08:34.240 --> 00:08:34.950
David Schaich (he): it's.

99
00:08:40.980 --> 00:08:42.480
David Schaich (he): Yeah, it looks like a very good place.

100
00:08:43.640 --> 00:08:46.730
David Schaich (he): something you come before locally out there.

101
00:08:56.220 --> 00:08:58.700
David Schaich (he): I'm curious if it is so

102
00:09:05.060 --> 00:09:07.410
David Schaich (he): that they business

103
00:09:08.650 --> 00:09:10.190
David Schaich (he): that.

104
00:09:12.250 --> 00:09:14.560
David Schaich (he): And then see here.

105
00:09:24.650 --> 00:09:26.160
David Schaich (he): say iphone

106
00:09:26.250 --> 00:09:27.790
David Schaich (he): on your first.

107
00:09:29.380 --> 00:09:31.040
David Schaich (he): All these windows systems are.

108
00:09:33.220 --> 00:09:34.660
David Schaich (he): It was single

109
00:09:37.380 --> 00:09:38.080
those days.

110
00:09:40.540 --> 00:09:41.340
David Schaich (he): Not

111
00:09:41.660 --> 00:09:42.350
I.

112
00:09:47.230 --> 00:09:48.350
David Schaich (he): Thank you.

113
00:09:48.680 --> 00:09:49.750
It

114
00:09:55.310 --> 00:09:58.590
David Schaich (he): Yeah. So I don't want to.

115
00:09:59.320 --> 00:10:01.980
David Schaich (he): If you have hopefully administrative.

116
00:10:02.100 --> 00:10:03.090
it was there

117
00:10:03.110 --> 00:10:08.480
David Schaich (he): and installated all right. No plan that all this should be

118
00:10:08.660 --> 00:10:09.830
so far blind

119
00:10:10.000 --> 00:10:12.040
David Schaich (he): task that I can try to do

120
00:10:12.170 --> 00:10:13.440
David Schaich (he): right here at all.

121
00:10:15.140 --> 00:10:16.020
David Schaich (he): Hello!

122
00:10:18.000 --> 00:10:20.710
David Schaich (he): We can work on things like that.

123
00:10:21.990 --> 00:10:22.850
David Schaich (he): There are other.

124
00:10:25.110 --> 00:10:25.960
David Schaich (he): we'll let you

125
00:10:28.780 --> 00:10:32.770
David Schaich (he): the contact just like the miracle iphone. and one time

126
00:10:33.430 --> 00:10:41.670
David Schaich (he): done with this little introductory recording. I'll take a look and see if I can get a miracle pipe. I'm running on one of these systems myself.

127
00:10:41.840 --> 00:10:44.160
David Schaich (he): Let you know how that goes.

128
00:10:45.710 --> 00:10:46.670
David Schaich (he): but

129
00:10:46.820 --> 00:10:50.190
David Schaich (he): the one thing to say about pseudo-random numbers is that

130
00:10:50.660 --> 00:10:51.730
David Schaich (he): the next

131
00:10:51.840 --> 00:10:54.440
David Schaich (he): code block here in this demo

132
00:10:54.940 --> 00:10:56.390
David Schaich (he): we start off by

133
00:10:57.900 --> 00:11:01.910
David Schaich (he): passing a seed to that random number generator

134
00:11:02.270 --> 00:11:05.960
David Schaich (he): and given a fixed number as a seed.

135
00:11:06.400 --> 00:11:15.660
David Schaich (he): the generator will produce the same sequence of pseudo-random numbers every time it is run starting from that seed. So

136
00:11:15.710 --> 00:11:17.970
David Schaich (he): this is useful

137
00:11:18.080 --> 00:11:19.710
because it allows

138
00:11:19.790 --> 00:11:25.750
David Schaich (he): these calculations that require some elements of randomness to be verified and checked.

139
00:11:26.260 --> 00:11:32.280
David Schaich (he): So you'll see in the computer project assignment that the seed is specified

140
00:11:32.450 --> 00:11:35.340
and given that seed everyone should get

141
00:11:35.490 --> 00:11:42.350
David Schaich (he): exactly the same numerical results. With some copyrights. We can see that pulling

142
00:11:42.520 --> 00:11:45.090
David Schaich (he): a random number out of the

143
00:11:46.060 --> 00:11:52.270
David Schaich (he): random number generator with this random random function call

144
00:11:52.940 --> 00:11:56.730
David Schaich (he): that gives us a variable called you that we can print.

145
00:11:56.840 --> 00:12:00.250
David Schaich (he): It is printed as point 8 6 3 0, etc.,

146
00:12:01.910 --> 00:12:07.350
David Schaich (he): calling Random Random again, gives us the next random number in that sequence.

147
00:12:08.350 --> 00:12:10.410
David Schaich (he): and that

148
00:12:11.160 --> 00:12:16.110
David Schaich (he): does not overwrite you, which is still sticking around for later use. We can print it again.

149
00:12:16.380 --> 00:12:21.490
David Schaich (he): Get the same number back just with some fancier formatting. Where?

150
00:12:21.670 --> 00:12:25.040
David Schaich (he): Here I put in some formatting tags

151
00:12:25.690 --> 00:12:28.480
David Schaich (he): that depend on these percentage signs.

152
00:12:28.900 --> 00:12:40.230
David Schaich (he): and it's something you can copy, paste or look at it more detail through tutorials or Google searches depending on how frequently you want to format anything that you are printing.

153
00:12:41.650 --> 00:12:42.790
David Schaich (he): The first

154
00:12:43.840 --> 00:12:47.000
David Schaich (he): exercise in the project assignments

155
00:12:47.220 --> 00:12:49.520
David Schaich (he): in is going to involve generating

156
00:12:50.540 --> 00:12:55.720
David Schaich (he): hundreds of thousands of random numbers which would be tedious to do

157
00:12:55.750 --> 00:12:59.190
David Schaich (he): one call the random at a time.

158
00:12:59.470 --> 00:13:06.230
David Schaich (he): So in any programming framework want to be fundamental capabilities is what is called a for loop

159
00:13:06.680 --> 00:13:10.920
David Schaich (he): that simply executes a fixed instruction or set of instructions.

160
00:13:11.010 --> 00:13:12.920
David Schaich (he): a given number of times.

161
00:13:12.940 --> 00:13:15.470
possibly with changes along the way.

162
00:13:16.130 --> 00:13:17.440
David Schaich (he): and in python

163
00:13:17.770 --> 00:13:20.210
David Schaich (he): a for loop is started

164
00:13:20.720 --> 00:13:25.260
David Schaich (he): by a line that begins with 4. It ends with a colon.

165
00:13:26.070 --> 00:13:35.190
David Schaich (he): and the loop lasts as long as the following lines are indented. They have white space at the start, either spaces or tabs.

166
00:13:36.400 --> 00:13:42.760
David Schaich (he): This is unique to Python. Different programming languages. We'll implement for loops in different ways, but they will all

167
00:13:42.860 --> 00:13:45.380
David Schaich (he): have them in some way, shape or form.

168
00:13:46.620 --> 00:13:48.330
David Schaich (he): and what this loop is doing

169
00:13:48.550 --> 00:13:50.540
David Schaich (he): is executing

170
00:13:50.840 --> 00:13:55.940
David Schaich (he): all 3 0f these lines for every value of I ranging from 0

171
00:13:56.020 --> 00:13:58.780
David Schaich (he): up to, and samples minus one.

172
00:14:01.440 --> 00:14:10.390
David Schaich (he): and you're seeing that we are getting a random number with each of those iterations of this loop.

173
00:14:10.690 --> 00:14:14.020
David Schaich (he): and what we are doing with it. Next to the

174
00:14:14.040 --> 00:14:16.510
David Schaich (he): second exercise

175
00:14:17.810 --> 00:14:20.020
David Schaich (he): in the project assignment, which I will

176
00:14:21.330 --> 00:14:23.610
David Schaich (he): pull up to save it about it.

177
00:14:25.260 --> 00:14:26.180
David Schaich (he): So

178
00:14:26.560 --> 00:14:30.040
David Schaich (he): one thing I neglected to states up until now is that

179
00:14:30.120 --> 00:14:36.120
David Schaich (he): that random random function is giving what's called a uniformly distributed random number.

180
00:14:36.250 --> 00:14:40.220
David Schaich (he): So it is between 0 and one, a real number

181
00:14:40.600 --> 00:14:44.640
David Schaich (he): with equal probability for any floating point number between

182
00:14:44.730 --> 00:14:50.100
David Schaich (he): 0 and one. which is the typical

183
00:14:50.650 --> 00:14:56.890
David Schaich (he): probability distribution that is being called by any given random number generator in any given language.

184
00:14:57.490 --> 00:15:00.220
David Schaich (he): but it's a rather boring one, just getting

185
00:15:00.250 --> 00:15:09.660
David Schaich (he): an equal sampling of numbers between 0 and one. rather than any of the interesting probability distributions that we want to

186
00:15:10.390 --> 00:15:11.170
got it

187
00:15:11.240 --> 00:15:12.600
David Schaich (he): investigates

188
00:15:13.080 --> 00:15:20.010
David Schaich (he): and say non-trivial things about. They actually require numerical computing rather than being exactly solvable

189
00:15:20.760 --> 00:15:24.480
David Schaich (he): approximately solvable by application of the central limit. Theorem.

190
00:15:26.240 --> 00:15:34.330
David Schaich (he): So given this sort of uniform distribution that's drawn on the right in this little sketch. I, you

191
00:15:34.810 --> 00:15:39.030
David Schaich (he): equal probability for all numbers u between 0 and one.

192
00:15:39.390 --> 00:15:44.800
David Schaich (he): If we act on any given number coming out of that random number generator

193
00:15:45.050 --> 00:15:55.000
David Schaich (he): with some function F. And take that to define a different random Number X. Then.

194
00:15:55.200 --> 00:15:58.960
David Schaich (he): depending on the function F. That we choose, we can

195
00:15:59.170 --> 00:16:07.790
David Schaich (he): engineer the probability, distribution P. Of X. That these transformed random numbers X.

196
00:16:09.040 --> 00:16:09.950
David Schaich (he): Follow.

197
00:16:11.660 --> 00:16:15.480
David Schaich (he): So is illustrated on the left, we could have some

198
00:16:15.700 --> 00:16:17.710
David Schaich (he): regions. Dx.

199
00:16:17.820 --> 00:16:29.400
David Schaich (he): In the accessible range of X. That have a greater probability of being sampled. Some regions that have a smaller probability of being sampled. So if you think of, for instance, a Gaussian

200
00:16:29.440 --> 00:16:31.210
David Schaich (he): probability distribution.

201
00:16:31.620 --> 00:16:36.230
David Schaich (he): you want to sample things around the peak of the Gaussian with an exponential suppression

202
00:16:36.310 --> 00:16:38.260
David Schaich (he): as you g0 0ff into the tails.

203
00:16:39.910 --> 00:16:41.140
David Schaich (he): Now, because

204
00:16:41.230 --> 00:16:44.920
David Schaich (he): we want both of these uniform distributions and

205
00:16:45.130 --> 00:16:50.990
David Schaich (he): the non-trivial P. Of X. Distribution to be well-defined probability distributions.

206
00:16:51.430 --> 00:16:52.420
David Schaich (he): You want

207
00:16:52.460 --> 00:16:56.320
David Schaich (he): the probability to be conserved, which is the statement that

208
00:16:57.060 --> 00:16:58.050
David Schaich (he): the

209
00:16:58.530 --> 00:17:03.800
David Schaich (he): infinitesimal elements P. Of U. D. U. Or P. Of x dx

210
00:17:03.890 --> 00:17:05.220
David Schaich (he): should be equal

211
00:17:05.380 --> 00:17:08.910
David Schaich (he): as we go. As we apply this transformation.

212
00:17:08.920 --> 00:17:14.970
David Schaich (he): which in turn requires that it is a nice continuous, invertible well-behaved function.

213
00:17:16.440 --> 00:17:18.770
David Schaich (he): and if we rearrange

214
00:17:19.040 --> 00:17:21.369
David Schaich (he): this condition.

215
00:17:21.670 --> 00:17:27.359
David Schaich (he): we find an expression for P. Of X. In terms of the relation between

216
00:17:27.619 --> 00:17:28.480
David Schaich (he): the

217
00:17:29.560 --> 00:17:31.210
David Schaich (he): infinitesimal region.

218
00:17:31.240 --> 00:17:35.010
David Schaich (he): the U and the corresponding infinitesimal region. Dx.

219
00:17:35.440 --> 00:17:40.920
David Schaich (he): Which we can recognize as the derivative Ddx

220
00:17:40.950 --> 00:17:45.500
David Schaich (he): of you as a function of X or the inverse transform

221
00:17:45.590 --> 00:17:52.470
David Schaich (he): that we started off with to define those X. So this procedure is known as inverse transform sampling.

222
00:17:53.040 --> 00:17:57.960
David Schaich (he): and we can use it in 2 ways, and we will use it in 2 ways. In this project.

223
00:17:58.520 --> 00:18:04.360
David Schaich (he): First we could be given the transform F of you, defining these X and figure out

224
00:18:04.610 --> 00:18:06.100
David Schaich (he): from this relation

225
00:18:06.190 --> 00:18:15.200
David Schaich (he): what the corresponding probability distribution is for those X, or we can go the other way. Say, there is some distribution that we want to target

226
00:18:15.410 --> 00:18:16.290
David Schaich (he): and

227
00:18:16.460 --> 00:18:19.430
David Schaich (he): engineer and appropriate transform

228
00:18:19.810 --> 00:18:28.210
David Schaich (he): to do so. It's that second task that is being done in this demo we want

229
00:18:29.540 --> 00:18:33.420
David Schaich (he): this probability. Distribution. P. Of X. Is x over 2

230
00:18:33.780 --> 00:18:42.600
David Schaich (he): with X ranging from 0 up t0 2. So the integral over that full distribution adds up t0 100, as always.

231
00:18:43.470 --> 00:18:49.360
David Schaich (he): But we have a higher probability of sampling larger x greater than one than we do

232
00:18:49.370 --> 00:18:51.270
David Schaich (he): less than one. This is

233
00:18:51.460 --> 00:18:53.240
David Schaich (he): how that distribution looks.

234
00:18:54.680 --> 00:18:57.150
David Schaich (he): and it's a

235
00:19:00.870 --> 00:19:13.340
David Schaich (he): what should be a straightforward check which you can do to make sure it all works out that the corresponding transform f of view producing the desire Distribution

236
00:19:13.510 --> 00:19:15.800
David Schaich (he): is setting those X's

237
00:19:15.910 --> 00:19:22.130
David Schaich (he): to be twice the square root of the uniformly distributed random numbers between 0 and one.

238
00:19:22.580 --> 00:19:23.990
So that's what we're doing

239
00:19:24.350 --> 00:19:25.590
David Schaich (he): in this for loop

240
00:19:27.210 --> 00:19:28.300
David Schaich (he): collecting

241
00:19:28.730 --> 00:19:35.070
David Schaich (he): a 100,000 samples of twice the square root of a uniformly distributed. Random number.

242
00:19:35.800 --> 00:19:37.190
David Schaich (he): computing the

243
00:19:38.320 --> 00:19:41.320
arithmetic mean the average of those numbers.

244
00:19:41.360 --> 00:19:42.870
David Schaich (he): as well as the

245
00:19:43.420 --> 00:19:46.900
David Schaich (he): average of the square of those numbers which gives us

246
00:19:47.770 --> 00:19:48.770
David Schaich (he): the

247
00:19:49.540 --> 00:19:54.710
David Schaich (he): the variance of that not trivial distribution, or at least an approximation to it

248
00:19:54.860 --> 00:19:56.930
David Schaich (he): which we can check with those

249
00:19:57.040 --> 00:20:08.660
David Schaich (he): 100,000 samples, comes out well within a of the exact results that should also be straightforward for you to calculate based on you give them

250
00:20:08.740 --> 00:20:10.420
David Schaich (he): probability distribution.

251
00:20:10.820 --> 00:20:14.980
David Schaich (he): So see how long those 100,000 samples take to run on

252
00:20:15.060 --> 00:20:16.410
David Schaich (he): the Google Cloud

253
00:20:16.580 --> 00:20:25.380
David Schaich (he): about 4.2 s. and we can also check that If we were to do just 5 samples rather than 10 to the 5,

254
00:20:25.860 --> 00:20:27.660
David Schaich (he): we would have much larger

255
00:20:28.000 --> 00:20:30.760
David Schaich (he): fluctuations in our arithmetic

256
00:20:30.810 --> 00:20:36.030
David Schaich (he): results around the exact value for

257
00:20:36.690 --> 00:20:37.930
20

258
00:20:38.120 --> 00:20:40.900
David Schaich (he): t0 60%. Similarly, with

259
00:20:41.250 --> 00:20:42.670
David Schaich (he): a larger number

260
00:20:44.160 --> 00:20:46.780
David Schaich (he): of samples. so

261
00:20:47.920 --> 00:20:49.550
David Schaich (he): say 10 million

262
00:20:49.860 --> 00:20:52.250
David Schaich (he): rather than a 100,000.

263
00:20:52.870 --> 00:20:53.900
David Schaich (he): It'll take

264
00:20:54.040 --> 00:20:58.250
David Schaich (he): a 100 times longer to run so a few seconds, but should get

265
00:20:58.400 --> 00:21:06.760
David Schaich (he): even more precisely of reproducing the exact result in agreement with that law of large numbers.

266
00:21:12.190 --> 00:21:16.680
David Schaich (he): I won't say too much about the next block in this demo it's showing off

267
00:21:17.060 --> 00:21:22.390
David Schaich (he): ways that both histograms and functions can be plotted in

268
00:21:22.580 --> 00:21:25.770
David Schaich (he): python, and in particular plotted on top of each other.

269
00:21:26.260 --> 00:21:29.290
David Schaich (he): as in this figure that is confirming that the

270
00:21:29.670 --> 00:21:37.830
David Schaich (he): 100000 0r in this case the 10 million random numbers that we just generated do produce a histogram in blue

271
00:21:37.890 --> 00:21:39.740
that matches the expected

272
00:21:39.940 --> 00:21:51.540
David Schaich (he): probability distribution in red that we were targeting. So that's confirmation that the transform we figured out from that distribution is correct. Maybe the

273
00:21:51.850 --> 00:21:54.870
David Schaich (he): last thing I will say for today is

274
00:21:55.040 --> 00:21:58.150
David Schaich (he): getting into third exercise

275
00:21:58.220 --> 00:21:59.810
a good target for

276
00:21:59.890 --> 00:22:03.800
David Schaich (he): the coming week. Up until the next iteration of

277
00:22:04.120 --> 00:22:08.740
David Schaich (he): this lab we will actually now use

278
00:22:09.070 --> 00:22:12.810
David Schaich (he): random numbers distributed according to a non-trivial

279
00:22:13.330 --> 00:22:19.460
David Schaich (he): probability distribution to carry out random walks that are more interesting.

280
00:22:19.540 --> 00:22:23.190
David Schaich (he): The the P. And Q. Left right that we did

281
00:22:23.240 --> 00:22:24.750
David Schaich (he): in class yesterday.

282
00:22:30.240 --> 00:22:31.680
David Schaich (he): So, after some

283
00:22:32.940 --> 00:22:35.930
David Schaich (he): analytic calculations based on the central limit, theorem.

284
00:22:36.360 --> 00:22:40.380
David Schaich (he): the actual computing for a random walk is going to require

285
00:22:41.250 --> 00:22:42.490
David Schaich (he): 2 0r 3

286
00:22:42.600 --> 00:22:47.160
David Schaich (he): different levels of 4 leaves, all nested within each other.

287
00:22:47.400 --> 00:22:49.910
David Schaich (he): and in the python code that corresponds to

288
00:22:50.010 --> 00:22:52.460
David Schaich (he): in this case 3 different levels

289
00:22:52.550 --> 00:22:54.010
David Schaich (he): of indentation.

290
00:22:55.260 --> 00:22:57.390
So just to pick this apart

291
00:22:59.090 --> 00:23:00.170
David Schaich (he): and

292
00:23:01.050 --> 00:23:06.680
David Schaich (he): make sure that what's going on here is all clear for you to look at it. More detail on your own

293
00:23:07.590 --> 00:23:10.880
David Schaich (he): for the remainder of the lab. What we're doing is first

294
00:23:11.500 --> 00:23:12.920
David Schaich (he): looping over

295
00:23:13.460 --> 00:23:20.670
David Schaich (he): different numbers, different lengths of this step. Sorry. Different numbers of steps in the walk different walk lines.

296
00:23:21.040 --> 00:23:24.310
David Schaich (he): So, considering 8 different varieties.

297
00:23:24.550 --> 00:23:27.100
First, a set of random walks, where we

298
00:23:27.170 --> 00:23:29.310
David Schaich (he): take 10 steps and say it's done

299
00:23:29.680 --> 00:23:32.960
next to set of random walks, where we take 20 steps and say it's done.

300
00:23:33.150 --> 00:23:35.210
David Schaich (he): and s0 0n all the way up to

301
00:23:35.300 --> 00:23:36.520
David Schaich (he): 80 steps.

302
00:23:38.390 --> 00:23:39.390
David Schaich (he): and

303
00:23:41.540 --> 00:23:49.300
David Schaich (he): for each of those different length walks we need to take the corresponding number of steps.

304
00:23:50.020 --> 00:23:54.880
David Schaich (he): and in order to get a large number of repetitions to feed into

305
00:23:55.040 --> 00:24:02.170
David Schaich (he): the law of large numbers and central limit theorem. we need to repeat each of those n step walks

306
00:24:02.240 --> 00:24:12.450
David Schaich (he): some number of times that's specified in the project assignments, and here called, and blocks. which is a 100,000. So those are the 3

307
00:24:12.570 --> 00:24:17.250
David Schaich (he): for us to go through every step in each walk.

308
00:24:17.550 --> 00:24:19.050
David Schaich (he): every repetition

309
00:24:19.230 --> 00:24:22.060
David Schaich (he): of walks, with a given number of steps.

310
00:24:22.400 --> 00:24:25.140
David Schaich (he): and every number of steps

311
00:24:25.260 --> 00:24:28.080
David Schaich (he): from the length of the walks that we are asked to

312
00:24:28.610 --> 00:24:37.310
David Schaich (he): consider. And the reason we're looking at steps with different numbers of walks is to compare the average

313
00:24:37.460 --> 00:24:42.980
David Schaich (he): length of that walk, the final position that we computed through the central limit theory of the law of diffusion yesterday.

314
00:24:43.340 --> 00:24:47.940
David Schaich (he): and see how that average walk. Clients depends on them on the number of steps.

315
00:24:48.720 --> 00:24:49.900
In this plot

316
00:24:50.150 --> 00:24:51.360
David Schaich (he): it looks

317
00:24:51.390 --> 00:24:53.310
David Schaich (he): recently linear

318
00:24:53.740 --> 00:24:59.210
David Schaich (he): and numerical python. once it is available.

319
00:25:00.530 --> 00:25:02.260
David Schaich (he): provides a

320
00:25:02.690 --> 00:25:04.540
David Schaich (he): linear fit function

321
00:25:05.400 --> 00:25:08.740
David Schaich (he): that can carry out a regression

322
00:25:09.670 --> 00:25:10.960
David Schaich (he): to this data.

323
00:25:11.120 --> 00:25:14.260
David Schaich (he): See how well it actually fits a straight line.

324
00:25:14.530 --> 00:25:16.300
David Schaich (he): and also see

325
00:25:16.740 --> 00:25:24.970
David Schaich (he): the parameters defining that straight line. It's, slope and intercept and confirm that those behave as expected the intercept

326
00:25:25.030 --> 00:25:30.120
David Schaich (he): should go t0 0. When 0 steps are taken. we don't get very far without walking.

327
00:25:30.560 --> 00:25:36.580
David Schaich (he): and the slope is related to the mean value, as we saw from the wall of diffusion yesterday.

328
00:25:36.940 --> 00:25:37.830
David Schaich (he): So

329
00:25:38.520 --> 00:25:40.560
David Schaich (he): I will stop talking. There.

330
00:25:40.710 --> 00:25:44.900
David Schaich (he): Are there further questions before I take a look to see what can be done

331
00:25:45.070 --> 00:25:47.870
David Schaich (he): on these machines about numerical python.

332
00:25:52.860 --> 00:25:54.980
David Schaich (he): So at least, for now i'll

333
00:25:55.570 --> 00:25:56.820
David Schaich (he): leave you to.

334
00:25:58.310 --> 00:26:02.290
David Schaich (he): even though it's only been about 5 min. It looks like I've

335
00:26:02.680 --> 00:26:07.180
David Schaich (he): crack down what can be used

336
00:26:07.550 --> 00:26:11.530
David Schaich (he): on these windows, machines, and presumably the ones

337
00:26:11.930 --> 00:26:14.730
David Schaich (he): in the library as well. So I

338
00:26:15.250 --> 00:26:19.300
David Schaich (he): looks for anaconda and clicked on that anaconda

339
00:26:19.510 --> 00:26:24.550
David Schaich (he): navigator which. when I was testing things

340
00:26:27.110 --> 00:26:28.070
David Schaich (he): on

341
00:26:29.410 --> 00:26:33.990
David Schaich (he): that computer right over there, it gave some options that have

342
00:26:37.410 --> 00:26:38.590
David Schaich (he): available.

343
00:26:39.670 --> 00:26:41.540
David Schaich (he): It is just taking a

344
00:26:42.630 --> 00:26:45.640
David Schaich (he): minute or 2 to load.

345
00:27:03.730 --> 00:27:06.310
David Schaich (he): I don't wish to

346
00:27:06.970 --> 00:27:12.230
David Schaich (he): update. So here is at Anaconda navigator, which

347
00:27:12.430 --> 00:27:13.070
is

348
00:27:13.370 --> 00:27:16.460
David Schaich (he): basically a collection of lots of

349
00:27:16.560 --> 00:27:22.870
David Schaich (he): useful tools. which I think that Command Exe prompt was the one

350
00:27:22.900 --> 00:27:27.430
David Schaich (he): he jumped into just by accident from clicking the other anaconda on the list.

351
00:27:29.470 --> 00:27:32.820
David Schaich (he): Jupiter notebooks should look a lot like

352
00:27:33.150 --> 00:27:39.580
David Schaich (he): the Google Collaboratory. So if I, by launching that

353
00:27:42.040 --> 00:27:45.430
David Schaich (he): this is open in Microsoft Edge

354
00:27:47.090 --> 00:27:50.170
David Schaich (he): just because windows.

355
00:27:51.690 --> 00:27:52.700
David Schaich (he): But

356
00:27:53.790 --> 00:28:01.490
David Schaich (he): we make a new hey on screen notebook from that menu and try

357
00:28:02.740 --> 00:28:11.850
David Schaich (he): pasting in the first block from that demo and run it.

358
00:28:13.360 --> 00:28:21.760
David Schaich (he): And it is happy with dump high, and that pop live available so slightly different versions. Then the demo. But

359
00:28:23.620 --> 00:28:25.300
they will still

360
00:28:25.380 --> 00:28:27.550
David Schaich (he): worked perfectly well for

361
00:28:27.880 --> 00:28:29.050
David Schaich (he): the project.

362
00:28:30.670 --> 00:28:33.050
David Schaich (he): I think another option on here is

363
00:28:33.140 --> 00:28:37.280
David Schaich (he): this spider, a scientific pipeline development environment.

364
00:28:38.420 --> 00:28:40.080
David Schaich (he): which should also

365
00:28:41.030 --> 00:28:46.560
David Schaich (he): provide numerical python map fault with, and many other packages that

366
00:28:46.690 --> 00:28:47.880
David Schaich (he): we won't, need

367
00:28:49.450 --> 00:28:50.620
David Schaich (he): I'll try it

368
00:28:53.230 --> 00:28:55.950
David Schaich (he): tasting in actually, what i'll do is

369
00:28:56.900 --> 00:28:58.000
David Schaich (he): get the

370
00:28:59.510 --> 00:29:03.500
David Schaich (he): raw Python code that entire demo, all in one

371
00:29:04.320 --> 00:29:14.250
David Schaich (he): file. And see I was built in windows. Jupiter Notebook

372
00:29:14.520 --> 00:29:22.420
David Schaich (he): handles that so it prints pseudo random numbers. Prince. The histogram is computing

373
00:29:22.930 --> 00:29:24.470
David Schaich (he): the random walks.

374
00:29:25.130 --> 00:29:28.560
David Schaich (he): and I will also not take a tour

375
00:29:31.730 --> 00:29:34.450
David Schaich (he): paste that entire demo

376
00:29:35.080 --> 00:29:39.810
David Schaich (he): into the spider that came up from the anaconda navigator

377
00:29:40.170 --> 00:29:43.650
David Schaich (he): and try executing that at the same time.

378
00:29:45.420 --> 00:29:48.880
David Schaich (he): And there, indeed is the hit that

379
00:29:49.590 --> 00:29:54.440
David Schaich (he): we ended up with through the cloud of the Google Laboratory, just running

380
00:29:54.850 --> 00:29:56.860
David Schaich (he): on the local host

381
00:29:57.620 --> 00:30:00.920
David Schaich (he): and over in Spider. Well, there, that is, as well

382
00:30:02.140 --> 00:30:07.360
David Schaich (he): just take so few seconds to run. So

383
00:30:10.750 --> 00:30:17.220
David Schaich (he): those are a few resources that can be used to stop these local machines without going to the cloud

384
00:30:17.720 --> 00:30:18.580
David Schaich (he): and

385
00:30:20.270 --> 00:30:21.710
David Schaich (he): machines in the

386
00:30:22.240 --> 00:30:25.090
David Schaich (he): library and elsewhere on campus should

387
00:30:25.890 --> 00:30:32.590
David Schaich (he): signed in but the attendance code that I have.

388
00:30:33.630 --> 00:30:34.620
David Schaich (he): or

389
00:30:35.330 --> 00:30:39.820
David Schaich (he): today i'll put up just at the top there. 1 5 0ne.

390
00:30:40.180 --> 00:30:41.760
David Schaich (he): 2 2 6,

391
00:30:44.910 --> 00:30:45.890
David Schaich (he): Yeah.

392
00:30:46.910 --> 00:30:50.310
David Schaich (he): Rush to get it here and get all signed in. I forgot to

393
00:30:51.710 --> 00:30:53.160
David Schaich (he): send that around.

394
00:31:01.330 --> 00:31:04.440
David Schaich (he): S0 0ne question that came up just now related to

395
00:31:05.120 --> 00:31:07.520
David Schaich (he): It's equation 2 in the

396
00:31:08.180 --> 00:31:13.560
David Schaich (he): first exercise. With the counseling probability distribution. The question was whether

397
00:31:14.120 --> 00:31:16.380
David Schaich (he): the use of ours that appear

398
00:31:16.450 --> 00:31:19.620
David Schaich (he): in the sub. For both the arithmetic mean

399
00:31:19.820 --> 00:31:20.850
David Schaich (he): and the

400
00:31:21.440 --> 00:31:24.010
David Schaich (he): arithmetic need estimates of

401
00:31:24.280 --> 00:31:34.070
David Schaich (he): that standard deviation. Sigma. whether these ares should be the same or should be generated separately. My answer was that

402
00:31:34.200 --> 00:31:41.820
David Schaich (he): you should be the same fixed sequence of numbers on each of the 2 equations

403
00:31:41.920 --> 00:31:43.530
in this expression.

404
00:31:44.250 --> 00:31:53.900
David Schaich (he): and that is the same sort of thing that's being done. And this third block in the demo for the yeah

405
00:31:53.910 --> 00:32:04.340
David Schaich (he): numbers are just being generated once with that single call to random random in the loop. and then multiple things are being done with them. Looking at both the

406
00:32:04.680 --> 00:32:06.640
David Schaich (he): arithmetic, me at the average

407
00:32:06.790 --> 00:32:09.910
David Schaich (he): and the arithmetic mean of the square. So that is a

408
00:32:10.170 --> 00:32:17.470
David Schaich (he): good question to you. Clarify explicitly and hopefully. What I just

409
00:32:17.600 --> 00:32:19.920
David Schaich (he): set was clear to everyone.

410
00:32:30.020 --> 00:32:36.020
David Schaich (he): Resume the recording just for a couple of last comments that

411
00:32:36.550 --> 00:32:41.110
David Schaich (he): in this line below equation one when I say that clearly it's a goal over

412
00:32:41.440 --> 00:32:43.140
David Schaich (he): P. Of X. Equals one.

413
00:32:43.440 --> 00:32:49.450
David Schaich (he): This X is referring to you the uniform distribution. That's all we're talking about. At this point.

414
00:32:49.840 --> 00:33:01.520
David Schaich (he): I cannot fix that typo just to avoid it. Any confusion. and without any further questions today. The one comments i'll make

415
00:33:01.780 --> 00:33:07.120
David Schaich (he): before shutting down. The recording is getting out of the computer lab.

416
00:33:07.150 --> 00:33:10.870
David Schaich (he): Leave it for the next class coming in here is that

417
00:33:11.610 --> 00:33:19.150
David Schaich (he): and for each of these 5 exercises, when I solve them myself. The computing that I needed ran in

418
00:33:19.240 --> 00:33:21.330
David Schaich (he): less than a minute for each of them

419
00:33:21.400 --> 00:33:24.570
David Schaich (he): on the Google Laboratory. And quicker than that.

420
00:33:24.710 --> 00:33:35.340
David Schaich (he): just on my laptop. So that is something that you can look out for if you're seeing things running for it 1520 0r 2,000 min. Then it

421
00:33:35.460 --> 00:33:39.930
David Schaich (he): chances are there's something going on in your code that

422
00:33:40.000 --> 00:33:43.340
David Schaich (he): can be improved or corrected. So that's

423
00:33:43.610 --> 00:33:54.740
David Schaich (he): something to keep an eye out for. I'm not asking you to do an enormous amount of large scale computational work that should be a matter of minutes what the code is in place to run.

